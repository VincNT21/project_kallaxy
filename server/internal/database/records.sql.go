// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: records.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserMediumRecord = `-- name: CreateUserMediumRecord :one
INSERT INTO users_media_records (id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration
`

type CreateUserMediumRecordParams struct {
	UserID     pgtype.UUID
	MediaID    pgtype.UUID
	IsFinished pgtype.Bool
	StartDate  pgtype.Timestamp
	EndDate    pgtype.Timestamp
	Duration   pgtype.Interval
}

func (q *Queries) CreateUserMediumRecord(ctx context.Context, arg CreateUserMediumRecordParams) (UsersMediaRecord, error) {
	row := q.db.QueryRow(ctx, createUserMediumRecord,
		arg.UserID,
		arg.MediaID,
		arg.IsFinished,
		arg.StartDate,
		arg.EndDate,
		arg.Duration,
	)
	var i UsersMediaRecord
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.MediaID,
		&i.IsFinished,
		&i.StartDate,
		&i.EndDate,
		&i.Duration,
	)
	return i, err
}

const deleteRecord = `-- name: DeleteRecord :one
WITH deleted AS (
    DELETE FROM users_media_records
    WHERE id = $1
    RETURNING id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration
)
SELECT count(*) FROM deleted
`

func (q *Queries) DeleteRecord(ctx context.Context, id pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, deleteRecord, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDatesFromRecord = `-- name: GetDatesFromRecord :one
SELECT start_date, end_date
FROM users_media_records
WHERE id = $1
`

type GetDatesFromRecordRow struct {
	StartDate pgtype.Timestamp
	EndDate   pgtype.Timestamp
}

func (q *Queries) GetDatesFromRecord(ctx context.Context, id pgtype.UUID) (GetDatesFromRecordRow, error) {
	row := q.db.QueryRow(ctx, getDatesFromRecord, id)
	var i GetDatesFromRecordRow
	err := row.Scan(&i.StartDate, &i.EndDate)
	return i, err
}

const getRecordByID = `-- name: GetRecordByID :one
SELECT id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration FROM users_media_records
WHERE id = $1
`

func (q *Queries) GetRecordByID(ctx context.Context, id pgtype.UUID) (UsersMediaRecord, error) {
	row := q.db.QueryRow(ctx, getRecordByID, id)
	var i UsersMediaRecord
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.MediaID,
		&i.IsFinished,
		&i.StartDate,
		&i.EndDate,
		&i.Duration,
	)
	return i, err
}

const getRecordsByUserID = `-- name: GetRecordsByUserID :many
SELECT id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration FROM users_media_records
WHERE user_id = $1
`

func (q *Queries) GetRecordsByUserID(ctx context.Context, userID pgtype.UUID) ([]UsersMediaRecord, error) {
	rows, err := q.db.Query(ctx, getRecordsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersMediaRecord
	for rows.Next() {
		var i UsersMediaRecord
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.MediaID,
			&i.IsFinished,
			&i.StartDate,
			&i.EndDate,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetRecords = `-- name: ResetRecords :exec
DELETE FROM users_media_records
`

func (q *Queries) ResetRecords(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetRecords)
	return err
}

const updateRecord = `-- name: UpdateRecord :one
UPDATE users_media_records
SET is_finished = $2, start_date = $3, end_date = $4, duration = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, user_id, media_id, is_finished, start_date, end_date, duration
`

type UpdateRecordParams struct {
	ID         pgtype.UUID
	IsFinished pgtype.Bool
	StartDate  pgtype.Timestamp
	EndDate    pgtype.Timestamp
	Duration   pgtype.Interval
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) (UsersMediaRecord, error) {
	row := q.db.QueryRow(ctx, updateRecord,
		arg.ID,
		arg.IsFinished,
		arg.StartDate,
		arg.EndDate,
		arg.Duration,
	)
	var i UsersMediaRecord
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.MediaID,
		&i.IsFinished,
		&i.StartDate,
		&i.EndDate,
		&i.Duration,
	)
	return i, err
}
