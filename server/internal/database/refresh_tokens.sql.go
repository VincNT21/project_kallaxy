// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteRevokedTokens = `-- name: DeleteRevokedTokens :exec
DELETE FROM refresh_tokens
WHERE revoked_at IS NOT NULL
`

func (q *Queries) DeleteRevokedTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteRevokedTokens)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeAllRefreshTokensByUserID = `-- name: RevokeAllRefreshTokensByUserID :one
WITH revoked AS (
    UPDATE refresh_tokens
    SET revoked_at = NOW(), updated_at = NOW()
    WHERE user_id = $1
    RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
)
SELECT count(*) FROM revoked
`

func (q *Queries) RevokeAllRefreshTokensByUserID(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, revokeAllRefreshTokensByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
WITH revoked AS (
    UPDATE refresh_tokens
    SET revoked_at = NOW(), updated_at = NOW()
    WHERE token = $1
    RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
)
SELECT count(*) FROM revoked
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRow(ctx, revokeRefreshToken, token)
	var count int64
	err := row.Scan(&count)
	return count, err
}
